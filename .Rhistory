shiny::runApp()
c1<-c(1,3,4,5,2)
c2<-c(2,4,5,2,4)
c1*c2
sum(c1*c2)
dim1<-c(.8,.7,.3,.1,.3)
c1<-c(1,3,4,5,2)
c2<-c(2,4,5,2,4)
score<-function(response) {
dim1<-c(.8,.7,.3,.1,.3)
dim2<-c(.3,.1,.3,.7,.8)
coord1<-sum(response*dim1)
coord2<-sum(response*dim2)
}
score(c1)
print(score(c1))
c1<-c(1,3,4,5,2)
c2<-c(2,4,5,2,4)
score<-function(response) {
dim1<-c(.8,.7,.3,.1,.3)
dim2<-c(.3,.1,.3,.7,.8)
coord1<-sum(response*dim1)
coord2<-sum(response*dim2)
result<-c(coord1,coord2)
}
print(score(c1))
print(score(c2))
?sqrt
c1<-c(1,3,4,5,2)
c2<-c(2,4,5,2,4)
score<-function(response) {
#cluster centers
cluster_name<-c("Customer Pleaser", "Efficient Operator", "Growth First")
cluster_coord1<-c(8,4,1)
cluster_coord2<-c(1,4,8)
dim1<-c(.8,.7,.3,.1,.3)
dim2<-c(.3,.1,.3,.7,.8)
coord1<-sum(response*dim1)
coord2<-sum(response*dim2)
min_distance<-1000
index<-1
for (i in 1:3) {
distance<-sqrt((cluster_coord1[i]-coord1[i])^2+(cluster_coord2[i]-coord2[i])^2)
if(min_distance<=distance) {
min_distance==distance; index==i
}
}
result<-index
}
score(c1)
c1<-c(1,3,4,5,2)
c2<-c(2,4,5,2,4)
score<-function(response) {
#cluster centers
cluster_name<-c("Customer Pleaser", "Efficient Operator", "Growth First")
cluster_coord1<-c(8,4,1)
cluster_coord2<-c(1,4,8)
dim1<-c(.8,.7,.3,.1,.3)
dim2<-c(.3,.1,.3,.7,.8)
coord1<-sum(response*dim1)
coord2<-sum(response*dim2)
min_distance<-1000
index<-1
for (i in 1:3) {
distance<-sqrt((cluster_coord1[i]-coord1[i])^2+(cluster_coord2[i]-coord2[i])^2)
if(min_distance>=distance) {
min_distance==distance
index==i
}
}
result<-index
}
score(c1)
c1<-c(1,3,4,5,2)
c2<-c(2,4,5,2,4)
score<-function(response) {
#cluster centers
cluster_name<-c("Customer Pleaser", "Efficient Operator", "Growth First")
cluster_coord1<-c(8,4,1)
cluster_coord2<-c(1,4,8)
dim1<-c(.8,.7,.3,.1,.3)
dim2<-c(.3,.1,.3,.7,.8)
coord1<-sum(response*dim1)
coord2<-sum(response*dim2)
min_distance<-1000
index<-1
for (i in 1:3) {
distance<-sqrt((cluster_coord1[i]-coord1[i])^2+(cluster_coord2[i]-coord2[i])^2)
if(min_distance>=distance) {
min_distance=distance
index=i
}
}
result<-index
}
score(c1)
cluster_name<-c("Customer Pleaser", "Efficient Operator", "Growth First")
cluster_coord1<-c(8,4,1)
cluster_coord2<-c(1,4,8)
coord1<-sum(response*dim1)
coord2<-sum(response*dim2)
coord1<-sum(c1*dim1)
coord2<-sum(c1*dim2)
dim1<-c(.8,.7,.3,.1,.3)
dim2<-c(.3,.1,.3,.7,.8)
coord1<-sum(c1*dim1)
coord2<-sum(c1*dim2)
min_distance<-1000
index<-1
for (i in 1:3) {
distance<-sqrt((cluster_coord1[i]-coord1[i])^2+(cluster_coord2[i]-coord2[i])^2)
if(min_distance>=distance) {
min_distance=distance
index=i
}
}
distance<-sqrt((cluster_coord1[1]-coord1[1])^2+(cluster_coord2[1]-coord2[1])^2)
for (i in 1:3) {
distance<-sqrt((cluster_coord1[i]-coord1[i])^2+(cluster_coord2[i]-coord2[i])^2)
#if(min_distance>=distance) {
#   min_distance=distance
#  index=i
#}
}
distance<-sqrt((cluster_coord1[2]-coord1[2])^2+(cluster_coord2[2]-coord2[2])^2)
cluster_coord1[2]
coord1[2]
for (i in 1:3) {
distance<-sqrt((cluster_coord1[i]-coord1)^2+(cluster_coord2[i]-coord2)^2)
#if(min_distance>=distance) {
#   min_distance=distance
#  index=i
#}
}
c1<-c(1,3,4,5,2)
c2<-c(2,4,5,2,4)
score<-function(response) {
#cluster centers
cluster_name<-c("Customer Pleaser", "Efficient Operator", "Growth First")
cluster_coord1<-c(8,4,1)
cluster_coord2<-c(1,4,8)
dim1<-c(.8,.7,.3,.1,.3)
dim2<-c(.3,.1,.3,.7,.8)
coord1<-sum(response*dim1)
coord2<-sum(response*dim2)
min_distance<-1000
index<-1
for (i in 1:3) {
distance<-sqrt((cluster_coord1[i]-coord1)^2+(cluster_coord2[i]-coord2)^2)
if(min_distance>=distance) {
min_distance=distance
index=i
}
}
result<-index
}
score(c1)
print(score(c1))
print(score(c2))
c1<-c(5,4,3,2,1)
c2<-c(1,2,3,4,5)
print(score(c2))
print(score(c1))
score<-function(response) {
#cluster centers
cluster_name<-c("Customer Pleaser", "Efficient Operator", "Growth First")
cluster_coord1<-c(8,4,1)
cluster_coord2<-c(1,4,8)
dim1<-c(.8,.7,.3,.1,.3)
dim2<-c(.3,.1,.3,.7,.8)
coord1<-sum(response*dim1)
coord2<-sum(response*dim2)
min_distance<-1000
index<-1
for (i in 1:3) {
distance<-sqrt((cluster_coord1[i]-coord1)^2+(cluster_coord2[i]-coord2)^2)
if(min_distance>=distance) {
min_distance=distance
index=i
}
}
result<-cluster_name(index)
}
print(score(c1))
score<-function(response) {
#cluster centers
cluster_name<-c("Customer Pleaser", "Efficient Operator", "Growth First")
cluster_coord1<-c(8,4,1)
cluster_coord2<-c(1,4,8)
dim1<-c(.8,.7,.3,.1,.3)
dim2<-c(.3,.1,.3,.7,.8)
coord1<-sum(response*dim1)
coord2<-sum(response*dim2)
min_distance<-1000
index<-1
for (i in 1:3) {
distance<-sqrt((cluster_coord1[i]-coord1)^2+(cluster_coord2[i]-coord2)^2)
if(min_distance>=distance) {
min_distance=distance
index=i
}
}
result<-cluster_name[index]
}
print(score(c1))
print(score(c2))
runApp()
runApp()
runApp()
runApp()
runApp()
?p
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
t<-img(src = "GF.png")
t
print(t)
cluster_image<-list(img(src = "CP.png"),img(src = "EO.png"),img(src = "GF.png"))
cluster_image[1]
cluster_image[2]
cluster_image<-c(img(src = "CP.png"),img(src = "EO.png"),img(src = "GF.png"))
cluster_image[2]
cluster_image<-list(img(src = "CP.png"),img(src = "EO.png"),img(src = "GF.png"))
cluster_image[2]
c1<-c(5,4,3,2,1)
c2<-c(1,2,3,4,5)
score<-function(response) {
#cluster centers. The estimates below could be an output of k-means procedure
cluster_name<-c("Customer Pleaser", "Efficient Operator", "Growth First")
cluster_image<-list(img(src = "CP.png"),img(src = "EO.png"),img(src = "GF.png"))
cluster_coord1<-c(8,4,1)
cluster_coord2<-c(1,4,8)
#linear combinations of responses used to score new observations. The estimates below
#could be an output of linear discriminant analysis
dim1<-c(.8,.7,.3,.1,.3)
dim2<-c(.3,.1,.3,.7,.8)
#estimate coordinates in 2D from lda for a new observation
coord1<-sum(response*dim1)
coord2<-sum(response*dim2)
min_distance<-1000
index<-1
#find the distanse to the nearest cluster center for a new response and output the "label"
for (i in 1:3) {
distance<-sqrt((cluster_coord1[i]-coord1)^2+(cluster_coord2[i]-coord2)^2)
if(min_distance>=distance) {
min_distance=distance
index=i
}
}
result<-list(cluster_name[index],cluster_image[index])
}
score(c1)
t<-score(c1)
t
t[1]
t[2]
runApp()
t<-unlist(score(c1))
t
t<-unlist(score(c1))[1]
t
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
install.packages("rsconnect")
install.packages("rsconnect")
install.packages("rsconnect")
